---
import moment from 'moment'
import type { HTMLAttributes } from 'astro/types'
import { marked } from 'marked'
import type { ProcessedPost } from '../../utils/fallback-blog-frontmatter'
import { config } from '../../consts'

interface Props extends HTMLAttributes<'div'> {
	posts: Array<ProcessedPost>
}

const { posts, class: className } = Astro.props
---

<script>
	import { resolveUrl } from '../../utils/resolve-url'
	import { wmEmitter } from '../solid/WindowManager/emitter'

	const blogList = document.getElementById('blog-list')
	if (blogList && blogList.dataset.hasGiscus?.toLowerCase() === 'false') {
		blogList?.childNodes.forEach((node) => {
			node.addEventListener('click', (e) => {
				if (window.innerWidth < 768) {
					return
				}
				if (node instanceof HTMLAnchorElement) {
					const url = resolveUrl(node.dataset.embed ?? node.href)
					e.stopImmediatePropagation()
					e.preventDefault()
					wmEmitter.emit('appendWindow', {
						title: node.querySelector('h2')?.textContent ?? '',
						url: url,
					})
				}
			})
		})
	}

	// Handle tag clicks
	document.addEventListener('click', (e) => {
		const target = e.target as HTMLElement
		if (target.classList.contains('tag-link')) {
			e.stopPropagation()
		}
	})
</script>

<div
	class:list={[
		'flex flex-col gap-2 max-sm:glassmorphism rounded-lg',
		className,
	]}
	id="blog-list"
	data-has-giscus={config.comment?.giscus ? 'true' : 'false'}
>
	{
		posts.map(async (post, index) => {
			const description = await marked(post.frontMatter.description)
			return (
				<Fragment>
					<div class="flex flex-col gap-3 p-4 md:p-6 pb-0!">
						<a
							href={`/blog/${post.frontMatter.slug}`}
							data-embed={`/embed/blog/${post.frontMatter.slug}`}
							class="blog-item break-all hover:underline"
						>
							<h2 class="text-lg md:text-2xl font-bold mb-2">
								{post.frontMatter.title}
							</h2>
							<div set:html={description} />
						</a>
						{post.frontMatter.tags.length > 0 && (
							<div class="flex flex-wrap gap-2 text-xs">
								{post.frontMatter.tags.map((tag) => (
									<a href={`/tags/${tag}`} class="tag tag-link">
										{tag}
									</a>
								))}
							</div>
						)}
						<div class="flex flex-wrap items-center gap-4 text-xs">
							<span>
								{moment(post.frontMatter.publishDate).format('YYYY-MM-DD')}
							</span>
						</div>
					</div>

					{index !== posts.length - 1 && <span class="hr" />}
				</Fragment>
			)
		})
	}
</div>

<style scoped>
	@reference "tailwindcss";

	.hr {
		@apply mx-auto my-2 w-[95%] h-[0.1px] bg-black/80 dark:bg-white/80;
	}

	.tag {
		@apply transition-colors;
		@apply no-underline hover:underline;
		@apply before:content-['#'];
	}
</style>
