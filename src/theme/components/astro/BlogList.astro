---
import moment from 'moment'
import type { HTMLAttributes } from 'astro/types'
import { marked } from 'marked'
import type { ProcessedPost } from '../../utils/fallback-blog-frontmatter'

interface Props extends HTMLAttributes<'div'> {
	posts: Array<ProcessedPost>
}

const { posts, class: className } = Astro.props
---

<script>
	import { resolveUrl } from '../../utils/resolve-url'
	import { wmEmitter } from '../solid/WindowManager/emitter'

	document.getElementById('blog-list')?.childNodes.forEach((node) => {
		node.addEventListener('click', (e) => {
			if (window.innerWidth < 768) {
				return
			}
			if (node instanceof HTMLAnchorElement) {
				const url = resolveUrl(node.dataset.embed ?? node.href)
				e.stopImmediatePropagation()
				e.preventDefault()
				wmEmitter.emit('appendWindow', {
					title: node.querySelector('h2')?.textContent ?? '',
					url: url,
				})
			}
		})
	})
</script>

<div
	class:list={[
		'flex flex-col gap-2 max-sm:glassmorphism rounded-lg',
		className,
	]}
	id="blog-list"
>
	{
		posts.map(async (post, index) => {
			const description = await marked(post.frontMatter.description)
			return (
				<Fragment>
					<a
						href={`/blog/${post.frontMatter.slug}`}
						data-embed={`/embed/blog/${post.frontMatter.slug}`}
						class="p-4 md:p-6 break-all"
					>
						<h2 class="text-lg md:text-2xl font-bold mb-2">
							{post.frontMatter.title}
						</h2>
						<div class="mb-2 md:mb-4">
							<Fragment set:html={description} />
						</div>
						<p class="text-sm">
							{moment(post.frontMatter.publishDate).format('YYYY-MM-DD')}
						</p>
					</a>
					{index !== posts.length - 1 && <span class="hr" />}
				</Fragment>
			)
		})
	}
</div>

<style scoped>
	@reference "tailwindcss";

	.hr {
		@apply mx-auto my-2 w-[95%] h-[0.1px] bg-black/80 dark:bg-white/80;
	}
</style>
