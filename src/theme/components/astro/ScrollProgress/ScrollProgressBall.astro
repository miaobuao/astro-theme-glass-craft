---
interface Props {
	selector: string
	strokeWidth?: number
	showPercentage?: boolean
	dynamicColor?: boolean
	class?: string
}

const {
	selector,
	strokeWidth = 4,
	showPercentage = true,
	dynamicColor = true,
	class: className,
} = Astro.props
---

<script>
	import { ScrollProgressBase } from './base'
	import { defineCustomElement } from '../../../utils/define-custom-element'

	class ScrollProgressBall extends ScrollProgressBase {
		static get observedAttributes() {
			return ['percentage', 'stroke-width', 'show-percentage', 'dynamic-color']
		}

		get strokeWidth() {
			return Number(this.getAttribute('stroke-width') || 4)
		}

		get showPercentage() {
			return this.getAttribute('show-percentage') !== 'false'
		}

		get dynamicColor() {
			return this.getAttribute('dynamic-color') !== 'false'
		}

		get circleRadius() {
			return (this.svg.getBoundingClientRect().width - this.strokeWidth) / 2
		}

		get circumference() {
			return (
				Number(
					(this.svg.getBoundingClientRect().width - this.strokeWidth) * Math.PI,
				) || 0
			)
		}

		get progressCircle() {
			return this.querySelector('.progress-circle') as SVGCircleElement
		}

		get percentageText() {
			return this.querySelector('.percentage') as HTMLDivElement
		}

		get svg() {
			return this.querySelector('svg') as SVGSVGElement
		}

		private updateSvgSize() {
			const r = this.circleRadius
			const size = r * 2 + this.strokeWidth
			const strokeWidth = this.strokeWidth

			this.svg.setAttribute('width', size.toString())
			this.svg.setAttribute('height', size.toString())
			this.querySelectorAll('circle').forEach((circle) => {
				circle.setAttribute('r', r.toString())
				circle.setAttribute('cx', (size / 2).toString())
				circle.setAttribute('cy', (size / 2).toString())
				circle.setAttribute('stroke-width', strokeWidth.toString())
			})
			this.progressCircle.setAttribute(
				'stroke-dasharray',
				this.circumference.toString(),
			)
		}

		attributeChangedCallback() {
			if (!this.targetElement || !this.progressCircle) {
				return
			}

			this.updateSvgSize()

			const percentage = this.percentage

			// Update circle progress
			const offset =
				this.circumference - (percentage / 100) * this.circumference
			this.progressCircle.style.strokeDashoffset = String(offset)

			// Update circle color based on percentage
			if (this.dynamicColor) {
				if (percentage < 50) {
					this.progressCircle.style.stroke = '#eab308' // yellow-500
				} else {
					this.progressCircle.style.stroke = '#22c55e' // green-500
				}
			} else {
				this.progressCircle.style.stroke = ''
			}

			// Update percentage text visibility and content
			if (this.percentageText) {
				if (this.showPercentage) {
					this.percentageText.style.display = ''
					this.percentageText.textContent = Math.round(percentage).toString()
				} else {
					this.percentageText.style.display = 'none'
				}
			}
		}
	}

	defineCustomElement('scroll-progress-ball', ScrollProgressBall)
</script>

<scroll-progress-ball
	data-selector={selector}
	stroke-width={strokeWidth}
	show-percentage={showPercentage}
	dynamic-color={dynamicColor}
	class:list={[className]}
>
	<div class:list={['relative']}>
		<svg class="rotate-[-90deg] size-full">
			<!-- Background circle -->
			<circle
				fill="none"
				stroke="currentColor"
				class="opacity-20"></circle>
			<!-- Progress circle -->
			<circle
				class="progress-circle transition-[stroke-dashoffset,stroke] duration-200"
				fill="none"
				stroke="currentColor"
				stroke-linecap="round"></circle>
		</svg>
		<div
			class="percentage absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-xs font-semibold select-none pointer-events-none after:content-['%']"
			style={showPercentage ? '' : 'display: none'}
		>
			0
		</div>
	</div>
</scroll-progress-ball>
