---
interface Props {
	selector: string
	strokeWidth?: number
	showPercentage?: boolean
	linecap?: 'round' | 'butt' | 'square'
	orientation?: 'horizontal' | 'vertical'
	dynamicColor?: boolean
	class?: string
}

const {
	selector,
	strokeWidth = 4,
	showPercentage = false,
	linecap = 'butt',
	orientation = 'horizontal',
	dynamicColor = true,
	class: className,
} = Astro.props
---

<script>
	import { ScrollProgressBase } from './base'
	import { defineCustomElement } from '../../../utils/define-custom-element'

	class ScrollProgressLine extends ScrollProgressBase {
		static get observedAttributes() {
			return [
				'percentage',
				'stroke-width',
				'show-percentage',
				'linecap',
				'orientation',
				'dynamic-color',
			]
		}

		get strokeWidth() {
			return Number(this.getAttribute('stroke-width') || 4)
		}

		get showPercentage() {
			return this.getAttribute('show-percentage') === 'true'
		}

		get linecap() {
			return this.getAttribute('linecap') || 'butt'
		}

		get orientation() {
			return this.getAttribute('orientation') || 'horizontal'
		}

		get dynamicColor() {
			return this.getAttribute('dynamic-color') !== 'false'
		}

		get lineLength() {
			const rect = this.svg.getBoundingClientRect()
			return this.orientation === 'vertical' ? rect.height : rect.width
		}

		get progressLine() {
			return this.querySelector('.progress-line') as SVGLineElement
		}

		get percentageText() {
			return this.querySelector('.percentage') as HTMLDivElement | null
		}

		get svg() {
			return this.querySelector('svg') as SVGSVGElement
		}

		private updateSvgSize() {
			const length = this.lineLength
			const strokeWidth = this.strokeWidth
			const linecap = this.linecap
			const orientation = this.orientation
			const offset = strokeWidth / 2

			if (orientation === 'vertical') {
				this.svg.setAttribute('width', strokeWidth.toString())
				this.svg.setAttribute('height', '100%')

				this.querySelectorAll('line').forEach((line) => {
					line.setAttribute('x1', offset.toString())
					line.setAttribute('y1', '0')
					line.setAttribute('x2', offset.toString())
					line.setAttribute('y2', length.toString())
					line.setAttribute('stroke-width', strokeWidth.toString())
					line.setAttribute('stroke-linecap', linecap)
				})
			} else {
				this.svg.setAttribute('width', '100%')
				this.svg.setAttribute('height', strokeWidth.toString())

				this.querySelectorAll('line').forEach((line) => {
					line.setAttribute('x1', '0')
					line.setAttribute('y1', offset.toString())
					line.setAttribute('x2', length.toString())
					line.setAttribute('y2', offset.toString())
					line.setAttribute('stroke-width', strokeWidth.toString())
					line.setAttribute('stroke-linecap', linecap)
				})
			}

			this.progressLine.setAttribute(
				'stroke-dasharray',
				length.toString(),
			)
		}

		attributeChangedCallback() {
			if (!this.targetElement || !this.progressLine) {
				return
			}

			this.updateSvgSize()

			const percentage = this.percentage

			// Update line progress
			const offset = this.lineLength - (percentage / 100) * this.lineLength
			this.progressLine.style.strokeDashoffset = String(offset)

			// Update line color based on percentage
			if (this.dynamicColor) {
				if (percentage < 50) {
					this.progressLine.style.stroke = '#eab308' // yellow-500
				} else {
					this.progressLine.style.stroke = '#22c55e' // green-500
				}
			} else {
				this.progressLine.style.stroke = ''
			}

			// Update percentage text visibility and content
			if (this.percentageText) {
				if (this.showPercentage) {
					this.percentageText.style.display = ''
					this.percentageText.textContent = Math.round(percentage).toString()
				} else {
					this.percentageText.style.display = 'none'
				}
			}
		}
	}

	defineCustomElement('scroll-progress-line', ScrollProgressLine)
</script>

<scroll-progress-line
	data-selector={selector}
	stroke-width={strokeWidth}
	show-percentage={showPercentage}
	linecap={linecap}
	orientation={orientation}
	dynamic-color={dynamicColor}
	class:list={[className]}
>
	<div
		class:list={[
			'relative',
			orientation === 'vertical' ? 'h-full' : 'w-full',
		]}
	>
		<svg
			class:list={[
				'overflow-visible',
				orientation === 'vertical' ? 'h-full' : 'w-full',
			]}
		>
			<!-- Background line -->
			<line stroke="currentColor" class="opacity-20"></line>
			<!-- Progress line -->
			<line
				class="progress-line transition-[stroke-dashoffset,stroke] duration-200"
				stroke="currentColor"></line>
		</svg>
		<div
			class:list={[
				'percentage text-xs font-semibold select-none pointer-events-none after:content-["%"]',
				'absolute',
				orientation === 'vertical'
					? 'bottom-0 left-1/2 -translate-x-1/2 translate-y-full mt-2'
					: 'top-1/2 right-0 -translate-y-1/2 translate-x-full ml-2',
			]}
			style={showPercentage ? '' : 'display: none'}
		>
			0
		</div>
	</div>
</scroll-progress-line>
