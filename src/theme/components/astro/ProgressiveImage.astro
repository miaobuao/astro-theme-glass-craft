---
import type { ProgressiveImage } from '../../config'

interface Props extends ProgressiveImage {
	thumbnailUrl: string
	class?: string
	imageClass?: string
}

const {
	alt,
	thumbnailUrl,
	url,
	loading,
	class: className,
	imageClass,
} = Astro.props
---

<script>
	import { defineCustomElement } from '../../utils/define-custom-element'

	const documentLoaded = new Promise<void>((resolve) => {
		if (document.readyState === 'complete') {
			resolve()
		}
		function handleLoaded() {
			window.removeEventListener('load', handleLoaded)
			resolve()
		}
		window.addEventListener('load', handleLoaded)
	})

	class ProgressiveImageElement extends HTMLElement {
		private loaded = false

		get thumbnailImage() {
			return this.querySelector('img')!
		}

		get originalImageUrl() {
			return this.dataset.url
		}

		get imageClass() {
			return this.dataset.imageClass
		}
		async handleLoaded() {
			this.thumbnailImage.removeEventListener('load', this.handleLoaded)
			this.thumbnailImage.removeEventListener('error', this.handleLoaded)

			await documentLoaded

			const originalImageUrl = this.originalImageUrl
			if (!originalImageUrl) {
				throw new Error('need `data-url`')
			}

			const handleOriginalImageLoaded = (ev: Event) => {
				this.loaded = true
				originalImage.removeEventListener('load', handleOriginalImageLoaded)
				originalImage.removeEventListener('error', handleOriginalImageLoaded)
				if (ev.type === 'error' || ev instanceof ErrorEvent) {
					return
				}
				originalImage.classList.add(
					'transition-all duration-1000 absolute top-0 left-0 opacity-0 w-full h-full',
					...(this.imageClass?.split(' ') ?? []),
				)

				this.appendChild(originalImage)
				originalImage.classList.remove('opacity-0')

				setTimeout(() => {
					if (this.thumbnailImage && this.contains(this.thumbnailImage)) {
						this.thumbnailImage.remove()
					}
				}, 1000)
			}

			const originalImage = new Image()
			originalImage.src = originalImageUrl
			originalImage.addEventListener('load', handleOriginalImageLoaded)
			originalImage.addEventListener('error', handleOriginalImageLoaded)
		}
		connectedCallback() {
			if (this.loaded) return

			this.thumbnailImage.addEventListener('load', this.handleLoaded)
			this.thumbnailImage.addEventListener('error', this.handleLoaded)
		}

		disconnectedCallback() {
			this.thumbnailImage?.removeEventListener('load', this.handleLoaded)
			this.thumbnailImage?.removeEventListener('error', this.handleLoaded)
		}
	}

	defineCustomElement('progressive-image', ProgressiveImageElement)
</script>

{
	thumbnailUrl === url.toString() ? (
		<img
			src={thumbnailUrl}
			alt={alt}
			loading={loading}
			class:list={[imageClass]}
		/>
	) : (
		<progressive-image
			data-url={url}
			data-thumbnailUrl={thumbnailUrl}
			data-imageClass={imageClass}
			class:list={['relative overflow-hidden', className]}
		>
			<img
				src={thumbnailUrl}
				alt={alt}
				loading={loading}
				class:list={['image-pixelated blur-md scale-105', imageClass]}
			/>
		</progressive-image>
	)
}
