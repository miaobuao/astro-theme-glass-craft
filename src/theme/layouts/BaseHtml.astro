---
import '../assets/css/global.css'

import ProgressiveImage from '../components/astro/ProgressiveImage.astro'
import { ClientRouter } from 'astro:transitions'
import type { HTMLAttributes } from 'astro/types'

import { config } from '../consts'
import {
	toAbsoluteUrl,
	getOriginalImageId,
	getThumbnailImageId,
} from '../utils/thumbnail'

export interface Props
	extends Omit<HTMLAttributes<'body'>, 'style' | 'class:list' | 'class'> {
	title?: string
	description?: string
	useBackground?: boolean
}

const { title, description, useBackground, ...bodyProps } = Astro.props

const canUseBackground = !!useBackground && !!config.backgroundImage
const background = await (async () => {
	if (!canUseBackground || !config.backgroundImage) {
		return
	}
	if (config.backgroundImage.type === 'progressive') {
		const backgroundInputUrl = new URL(config.backgroundImage.url)
		const thumbnailId = await getThumbnailImageId(backgroundInputUrl)
		const originalId = await getOriginalImageId(backgroundInputUrl)
		const backgroundThumbnailUrl = await toAbsoluteUrl(thumbnailId)
		const backgroundOriginalUrl = await toAbsoluteUrl(originalId)
		return {
			progressive: true,
			backgroundOriginalUrl,
			backgroundThumbnailUrl,
		} as const
	}
	let backgroundOriginalUrl: string
	if (config.backgroundImage.url.protocol.toLowerCase() === 'file:') {
		backgroundOriginalUrl = await toAbsoluteUrl(
			await getOriginalImageId(config.backgroundImage.url),
		)
	} else {
		backgroundOriginalUrl = config.backgroundImage.url.toString()
	}
	return {
		progressive: false,
		backgroundOriginalUrl: backgroundOriginalUrl,
		backgroundThumbnailUrl: backgroundOriginalUrl,
	} as const
})()
---

<html lang="zh-CN" class="no-scrollbar">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		{title && <title>{title}</title>}

		<!-- Open Graph / Facebook -->
		{
			title && (
				<Fragment>
					<meta property="og:title" content={title} />
					<meta property="og:type" content="website" />
					<meta property="og:url" content={Astro.url} />
				</Fragment>
			)
		}
		{
			description && (
				<Fragment>
					<meta name="description" content={description} />
					<meta property="og:description" content={description} />
				</Fragment>
			)
		}
		<ClientRouter />
	</head>

	<body class="dark:text-white">
		{
			canUseBackground && background ? (
				background.progressive ? (
					<div {...bodyProps} class:list={['relative h-screen']}>
						<div class="absolute w-screen h-screen">
							<ProgressiveImage
								imageClass="object-cover object-center size-full"
								url={background.backgroundOriginalUrl}
								thumbnailUrl={background.backgroundThumbnailUrl}
								class="size-full"
							/>
						</div>
						<slot />
					</div>
				) : (
					<div
						{...bodyProps}
						class="bg-cover bg-center bg-fixed h-screen"
						style={{
							backgroundImage: `url(${background.backgroundOriginalUrl})`,
						}}
					>
						<slot />
					</div>
				)
			) : (
				<div {...bodyProps}>
					<slot />
				</div>
			)
		}
	</body>
</html>
