---
import { WindowManager } from '../components/solid/WindowManager/WindowManager'
import BaseHtml, { type Props as BaseHtmlProps } from './BaseHtml.astro'
import AdaptiveIconButton from '../components/astro/AdaptiveIconButton.astro'
import { config } from '../consts'
import ProgressiveImage from '../components/astro/ProgressiveImage.astro'
import {
	getOriginalImageId,
	getThumbnailImageId,
	toAbsoluteUrl,
} from '../utils/thumbnail'
import { WindowsList } from '../components/solid/WindowManager/WindowsList'
import { getNavigationConditions } from '../utils/navigation'
import ScrollProgressBall from '../components/astro/ScrollProgress/ScrollProgressBall.astro'

interface Props extends BaseHtmlProps {
	showAuthorInfo?: boolean
	showScrollProgress?: boolean
}

const {
	showAuthorInfo,
	showScrollProgress,
	title,
	description,
	...otherProps
} = Astro.props

const isTimeline =
	Astro.url.pathname === '/' || Astro.url.pathname.startsWith('/blog/')
const isArchive =
	Astro.url.pathname === '/archive' ||
	Astro.url.pathname.startsWith('/archive/')
const isBrowse =
	Astro.url.pathname === '/browse' || Astro.url.pathname.startsWith('/browse/')
const isAboutMe =
	Astro.url.pathname === config.customPages?.aboutMe ||
	Astro.url.pathname === config.customPages?.aboutMe + '/'
const isGallery =
	Astro.url.pathname === '/gallery' ||
	Astro.url.pathname.startsWith('/gallery/')
const isFriendLinks =
	Astro.url.pathname === '/friend-links' ||
	Astro.url.pathname.toLowerCase().startsWith('/friend-links/')
const isFinder =
	Astro.url.pathname === '/finder' ||
	Astro.url.pathname.toLowerCase().startsWith('/finder/')

const timelineIcon = isTimeline
	? 'icon-[material-symbols--nest-clock-farsight-analog]'
	: 'icon-[material-symbols--nest-clock-farsight-analog-outline]'

const archiveIcon = isArchive
	? 'icon-[icon-park-solid--calendar]'
	: 'icon-[icon-park-outline--calendar]'

const browseIcon = isBrowse
	? 'icon-[material-symbols--folder-open]'
	: 'icon-[material-symbols--folder-open-outline]'

const meIcon = isAboutMe
	? 'icon-[material-symbols--sentiment-excited]'
	: 'icon-[material-symbols--sentiment-excited-outline]'

const galleryIcon = isGallery
	? 'icon-[material-symbols--image]'
	: 'icon-[material-symbols--image-outline]'

const friendLinksIcon = isFriendLinks
	? 'icon-[icon-park-solid--friends-circle]'
	: 'icon-[icon-park-outline--friends-circle]'

const finderIcon = isFinder
	? 'icon-[ix--navigation-filled]'
	: 'icon-[ix--navigation]'

const { showGallery, showArchive, showFriendLinks, showShare, showFinder } =
	await getNavigationConditions()

const canUseBackground = !!config.backgroundImage

const background = await (async () => {
	if (!canUseBackground || !config.backgroundImage) {
		return
	}
	if (config.backgroundImage.type === 'progressive') {
		const backgroundInputUrl = new URL(config.backgroundImage.url)
		const thumbnailId = await getThumbnailImageId(backgroundInputUrl)
		const originalId = await getOriginalImageId(backgroundInputUrl)
		const backgroundThumbnailUrl = await toAbsoluteUrl(thumbnailId)
		const backgroundOriginalUrl = await toAbsoluteUrl(originalId)
		return {
			progressive: true,
			backgroundOriginalUrl,
			backgroundThumbnailUrl,
		} as const
	}
	let backgroundOriginalUrl: string
	if (config.backgroundImage.url.protocol.toLowerCase() === 'file:') {
		backgroundOriginalUrl = await toAbsoluteUrl(
			await getOriginalImageId(config.backgroundImage.url),
		)
	} else {
		backgroundOriginalUrl = config.backgroundImage.url.toString()
	}
	return {
		progressive: false,
		backgroundOriginalUrl: backgroundOriginalUrl,
		backgroundThumbnailUrl: backgroundOriginalUrl,
	} as const
})()
---

<BaseHtml
	{...otherProps}
	title={title ?? config.title}
	description={description ?? config.description}
	class="dark:text-white"
>
	{
		() => {
			const content = (
				<div class="absolute size-full max-w-7xl left-0 right-0 mx-auto sm:p-2">
					<div class="sm:glassmorphism size-full rounded-md flex flex-row gap-2">
						<div class="fixed w-full sm:w-50 lg:w-52 bottom-0 left-0 z-50 sm:static sm:flex sm:flex-col sm:overflow-auto no-scrollbar gap-2">
							{showAuthorInfo && (
								<div
									class:list={[
										'hidden sm:flex flex-col gap-1 justify-center items-center p-4',
									]}
									transition:persist="author-info"
								>
									<img
										src={config.author.avatar.url.toString()}
										alt={config.author.avatar.alt ?? 'avatar'}
										class="rounded-full size-24 select-none"
										loading="lazy"
									/>
									<p class="text-2xl font-bold">{config.author.name}</p>
									{config.author.signature && (
										<p class="text-sm">{config.author.signature}</p>
									)}
								</div>
							)}

							<div class="flex flex-row sm:flex-col w-full justify-around border-none max-sm:glassmorphism sm:p-2">
								<AdaptiveIconButton active={isTimeline} href="/">
									<i
										slot="icon"
										class:list={[timelineIcon, 'size-6 sm:size-8']}
									/>
									Timeline
								</AdaptiveIconButton>
								{showArchive && (
									<AdaptiveIconButton active={isArchive} href="/archive">
										<i
											slot="icon"
											class:list={[archiveIcon, 'size-6 sm:size-8']}
										/>
										Archive
									</AdaptiveIconButton>
								)}
								{showShare && (
									<AdaptiveIconButton
										class="hidden sm:flex"
										active={isBrowse}
										href="/browse"
									>
										<i
											slot="icon"
											class:list={[browseIcon, 'size-6 sm:size-8']}
										/>
										Share
									</AdaptiveIconButton>
								)}
								{showGallery && (
									<AdaptiveIconButton
										class="hidden sm:flex"
										active={isGallery}
										href="/gallery"
									>
										<i
											slot="icon"
											class:list={[galleryIcon, 'size-6 sm:size-8']}
										/>
										Gallery
									</AdaptiveIconButton>
								)}
								{showFriendLinks && (
									<AdaptiveIconButton
										class="hidden sm:flex"
										active={isFriendLinks}
										href="/friend-links/"
									>
										<i
											slot="icon"
											class:list={[friendLinksIcon, 'size-6 sm:size-8']}
										/>
										Friends
									</AdaptiveIconButton>
								)}
								{showFinder && (
									<AdaptiveIconButton
										class="max-sm:flex hidden"
										active={isFinder}
										href="/finder"
									>
										<i
											slot="icon"
											class:list={[finderIcon, 'size-6 sm:size-8']}
										/>
										Finder
									</AdaptiveIconButton>
								)}
								{config.customPages?.aboutMe && (
									<AdaptiveIconButton
										active={isAboutMe}
										href={config.customPages.aboutMe}
									>
										<i slot="icon" class:list={[meIcon, 'size-6 sm:size-8']} />
										About Me
									</AdaptiveIconButton>
								)}
							</div>

							<WindowsList
								client:only="solid-js"
								className="flex-1 hidden sm:flex flex-col gap-1 overflow-auto px-2"
							/>
						</div>

						<main
							id="main-scroll-container"
							class="overflow-auto h-full flex-1 no-scrollbar"
						>
							<div class="p-2 sm:pl-0">
								<slot />
							</div>
						</main>
					</div>

					{showScrollProgress && (
						<ScrollProgressBall
							selector="#main-scroll-container"
							class="transition-all fixed bottom-32 2xl:bottom-12 right-4 z-50 glassmorphism rounded-full size-14 p-0.5 sm:size-17 sm:p-1"
						/>
					)}
				</div>
			)

			return canUseBackground && background ? (
				background.progressive ? (
					<div class:list={['relative h-screen pointer-events-none']}>
						<div
							class="absolute w-screen h-screen pointer-events-none"
							transition:persist="bg"
						>
							<ProgressiveImage
								imageClass="object-cover object-center size-full pointer-events-none"
								url={background.backgroundOriginalUrl}
								thumbnailUrl={background.backgroundThumbnailUrl}
								class="size-full pointer-events-none"
							/>
						</div>
						<div class="pointer-events-auto">{content}</div>
					</div>
				) : (
					<div
						class="bg-cover bg-center bg-fixed h-screen"
						style={{
							backgroundImage: `url(${background.backgroundOriginalUrl})`,
						}}
					>
						{content}
					</div>
				)
			) : (
				content
			)
		}
	}
	<WindowManager
		class="invisible md:visible not-md:pointer-events-none"
		client:only="solid-js"
		transition:persist="wm"
	/>
</BaseHtml>

<script defer>
	window.addEventListener(
		'wheel',
		(e) => {
			const scrollContainer = document.getElementById('main-scroll-container')
			if (e.target !== document.body) {
				return
			}
			e.preventDefault()
			scrollContainer.scrollTop += e.deltaY
		},
		{ passive: false },
	)
</script>
