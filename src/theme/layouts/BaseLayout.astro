---
import BaseHtml, { type Props as BaseHtmlProps } from './BaseHtml.astro'
import AdaptiveIconButton from '../components/astro/AdaptiveIconButton.astro'
import { config } from '../consts'
import { getCollection } from 'astro:content'

interface Props extends BaseHtmlProps {
	showAuthorInfo?: boolean
}

const { showAuthorInfo, title, description, ...otherProps } = Astro.props

const isTimeline =
	Astro.url.pathname === '/' || Astro.url.pathname.startsWith('/blog/')
const isBrowse =
	Astro.url.pathname === '/browse' || Astro.url.pathname.startsWith('/browse/')
const isAboutMe =
	Astro.url.pathname === config.customPages?.aboutMe ||
	Astro.url.pathname === config.customPages?.aboutMe + '/'
const isGallery =
	Astro.url.pathname === '/gallery' ||
	Astro.url.pathname.startsWith('/gallery/')
const isFriendLinks =
	Astro.url.pathname === '/friend-links' ||
	Astro.url.pathname === '/friend-links/'

const timelineIcon = isTimeline
	? 'icon-[material-symbols--nest-clock-farsight-analog]'
	: 'icon-[material-symbols--nest-clock-farsight-analog-outline]'

const browseIcon = isBrowse
	? 'icon-[material-symbols--folder-open]'
	: 'icon-[material-symbols--folder-open-outline]'

const meIcon = isAboutMe
	? 'icon-[material-symbols--sentiment-excited]'
	: 'icon-[material-symbols--sentiment-excited-outline]'

const galleryIcon = isGallery
	? 'icon-[material-symbols--image]'
	: 'icon-[material-symbols--image-outline]'

const friendLinksIcon = isFriendLinks
	? 'icon-[icon-park-solid--friends-circle]'
	: 'icon-[icon-park-outline--friends-circle]'

const showGallery = (await getCollection('gallery')).length > 0
---

<BaseHtml
	{...otherProps}
	title={title ?? config.title}
	description={description ?? config.description}
	useBackground
>
	<div class="absolute size-full max-w-7xl left-0 right-0 mx-auto sm:p-2">
		<div class="sm:glassmorphism size-full rounded-md flex flex-row gap-2">
			<div
				class="fixed w-full sm:w-fit sm:max-w-48 lg:max-w-52 bottom-0 left-0 z-50 sm:static sm:flex sm:flex-col sm:p-2 sm:overflow-auto no-scrollbar gap-2"
			>
				{
					showAuthorInfo && (
						<div
							class:list={[
								'hidden sm:flex flex-col gap-1 justify-center items-center p-4',
							]}
						>
							<img
								src={config.author.avatar.url.toString()}
								alt={config.author.avatar.alt ?? 'avatar'}
								class="rounded-full size-24 select-none"
								transition:name="avatar"
								loading="lazy"
							/>
							<p class="text-2xl font-bold">{config.author.name}</p>
							{config.author.signature && (
								<p class="text-sm">{config.author.signature}</p>
							)}
						</div>
					)
				}

				<div
					class="flex flex-row sm:flex-col w-full justify-around border-none max-sm:glassmorphism"
				>
					<AdaptiveIconButton active={isTimeline} href="/">
						<i slot="icon" class:list={[timelineIcon, 'size-6 sm:size-8']}></i>
						Timeline
					</AdaptiveIconButton>
					{
						config.customPages?.shareDirectory && (
							<AdaptiveIconButton active={isBrowse} href="/browse">
								<i slot="icon" class:list={[browseIcon, 'size-6 sm:size-8']} />
								Share
							</AdaptiveIconButton>
						)
					}
					{
						showGallery && (
							<AdaptiveIconButton active={isGallery} href="/gallery">
								<i slot="icon" class:list={[galleryIcon, 'size-6 sm:size-8']} />
								Gallery
							</AdaptiveIconButton>
						)
					}
					<AdaptiveIconButton active={isFriendLinks} href="/friend-links/">
						<i slot="icon" class:list={[friendLinksIcon, 'size-6 sm:size-8']}
						></i>
						Friends
					</AdaptiveIconButton>
					{
						config.customPages?.aboutMe && (
							<AdaptiveIconButton
								active={isAboutMe}
								href={config.customPages.aboutMe}
							>
								<i slot="icon" class:list={[meIcon, 'size-6 sm:size-8']} />
								About Me
							</AdaptiveIconButton>
						)
					}
				</div>
			</div>

			<main
				id="main-scroll-container"
				class="overflow-auto h-full flex-1 no-scrollbar"
			>
				<div class="p-2 sm:pl-0">
					<slot />
				</div>
			</main>
		</div>
	</div>
</BaseHtml>

<script defer>
	window.addEventListener(
		'wheel',
		(e) => {
			const scrollContainer = document.getElementById('main-scroll-container')
			if (e.target !== document.body) {
				return
			}
			e.preventDefault()
			scrollContainer.scrollTop += e.deltaY
		},
		{ passive: false },
	)
</script>
