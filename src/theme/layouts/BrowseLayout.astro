---
import { join } from 'path'
import AbstractFileButton from '../components/astro/AbstractFileButton.astro'
import type { AbstractFile } from '../utils/abstract-file'
import BaseLayout from './BaseLayout.astro'
import { basename } from 'path'
import { relative } from 'path'
import { SHARE_DIR } from '../consts'
import { isImageFilename } from '../utils/is-image-filename'
import { getImageDimensions } from '../utils/get-image-dimensions'

interface Props {
	files: AbstractFile[]
}

const { files } = Astro.props as Props

function dir2Url(absPath: string) {
	return join(Astro.url.pathname, basename(absPath))
}

function abs2Rel(absPath: string) {
	if (!SHARE_DIR) {
		throw new Error('SHARE_DIR cannot be void')
	}
	return relative(SHARE_DIR, absPath)
}

function file2Url(absPath: string) {
	return join('/share/files', abs2Rel(absPath))
}
function file2ThumbnailUrl(absPath: string) {
	return join('/share/thumbnail', abs2Rel(absPath))
}
---

<BaseLayout showAuthorInfo>
	<div
		class:list={[
			'grid gap-2',
			'sm:grid-cols-2',
			'xl:grid-cols-3',
			'2xl:grid-cols-4',
		]}
	>
		{
			files.map(async (file) => {
				// Get image dimensions for image files
				const dimensions = isImageFilename(file.absPath)
					? await getImageDimensions(file.absPath)
					: undefined

				return file.isDir ? (
					<AbstractFileButton
						isDir={true}
						url={dir2Url(file.absPath)}
						name={basename(file.absPath)}
					/>
				) : isImageFilename(file.absPath) ? (
					<AbstractFileButton
						isDir={false}
						url={file2Url(file.absPath)}
						name={basename(file.absPath)}
						thumbnailUrl={file2ThumbnailUrl(file.absPath)}
						imageDimensions={dimensions}
					/>
				) : (
					<AbstractFileButton
						isDir={false}
						url={file2Url(file.absPath)}
						name={basename(file.absPath)}
					/>
				)
			})
		}
	</div>
</BaseLayout>
